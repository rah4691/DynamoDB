from bokeh.plotting import figure, show
from bokeh.models.widgets.tables import NumberFormatter, BooleanFormatter
from bokeh.transform import cumsum
from bokeh.plotting import figure
from bokeh.palettes import Category20c, Category20
from bokeh.core.enums import LineDash, LineCap, MarkerType, NamedColor
from bokeh.models.plots import Model, _list_attr_splat
from math import pi
from panel.reactive import ReactiveHTML
import panel as pn
import pandas as pd
import param
import datetime as dt
import time
import numpy as np
from bokeh.models import ColumnDataSource, OpenURL, TapTool
from bokeh.plotting import figure, output_file, show
#import holoviews as hv
import logging
logging.basicConfig(level=logging.DEBUG)
css = """
"""
pn.extension('tabulator', notifications=True, raw_css=[css],css_files=[pn.io.resources.CSS_URLS['font-awesome'], './assets/styles.css'])
# icon = './assets/ASM_Logo.png'
# logo=icon,
material = pn.template.MaterialTemplate(title='Siemens ASM', header_background='#007bff', header_color='white')
column = pn.Column('# Home Tab', pn.pane.Alert('## Alert\nThis is a primary message'))
column.append(pn.pane.GIF('https://upload.wikimedia.org/wikipedia/commons/d/de/Ajax-loader.gif'))
column.append(pn.widgets.DatePicker(name='Date Picker'))
column.append(pn.indicators.Progress(name='Indeterminate Progress',active=True, width=200, bar_color="primary"))
button = pn.widgets.Button(name='Notification Toast', button_type='danger')
# button.js_on_click(args={}, code='window.open(target.value)')
# button.jscallback(clicks="""
# pn.state.notifications.send('Fire!!!', background='red', icon='<i class="fas fa-burn"></i>');
# pn.io.notifications.NotificationArea.demo()
# """, args={'pn': pn})
column.append(button)
column.append(pn.Row(1, pn.Spacer(width=200), 2, pn.Spacer(width=100), 3, pn.Spacer(width=50), 4, pn.Spacer(width=25), 5))
# pn.Column('# Some markdown').get_root()
tabs = pn.Tabs(('Home', column))
###################################
class GoogleMapViewer(param.Parameterized):
 continent = param.ObjectSelector(default='Asia', objects=['Africa', 'Asia', 'Europe'])
 country = param.ObjectSelector(default='India', objects=['Japan', 'China', 'Thailand', 'India'])
 _countries = {'Africa': ['Ghana', 'Togo', 'South Africa', 'Tanzania'],'Asia': ['Japan', 'China', 'Thailand'],'Europe': ['Austria', 'Bulgaria', 'Greece', 'Portugal', 'Switzerland']}

@param.depends('continent', watch=True)
def _update_countries(self):
 countries = self._countries[self.continent]
 self.param['country'].objects = countries
 self.country = countries[0]

@param.depends('country')
def view(self):
 iframe = """
 <iframe width="800" height="400"
 src="https://maps.google.com/maps?q={country}&z=6&output=embed" frameborder="0" scrolling="no" marginheight="0" marginwidth="0"></iframe>""".format(country=self.country)
 return pn.pane.HTML(iframe, height=400)


viewer = GoogleMapViewer(name='Google Map Viewer')

#####################################

value1 = pn.widgets.Spinner(value=0, width=75)
operator = pn.widgets.Select(value='*', options=['*', '+'], width=50, align='center')
value2 = pn.widgets.Spinner(value=0, width=75)
button = pn.widgets.Button(name='(Click for Answer) =', width=100)
result = pn.widgets.StaticText(value='0', width=100, align='center')
button.jscallback(clicks="""
if (op.value == '*')
result.text = (v1.value * v2.value).toString()
else
result.text = (v1.value + v2.value).toString()
""", args={'op': operator, 'result': result, 'v1': value1, 'v2': value2})
#########################################
html_pane = pn.pane.HTML("""
<h1>This is an HTML pane</h1>
<code>
x = 5;<br>
y = 6;<br>
z = x + y;
</code>
<br>
<br>
<table>
<tr>
<th>Firstname</th>
<th>Lastname</th>
<th>Age</th>
</tr>
<tr>
<td>Jill</td>
<td>Smith</td>
<td>50</td>
</tr>
<tr>
<td>Eve</td>
<td>Jackson</td>
<td>94</td>
</tr>
</table>
""", style={'background-color': '#F6F6F6', 'border': '2px solid black',
'border-radius': '5px', 'padding': '10px'})
#######################################
x = {
'United States': 157,
'United Kingdom': 93,
'Japan': 89,
'China': 63,
'Germany': 44,
'India': 42,
'Italy': 40,
'Australia': 35,
'Brazil': 32,
'France': 31,
'Taiwan': 31,
'Spain': 29
}
data = pd.Series(x).reset_index(name='value').rename(
columns={'index': 'country'})
data['angle'] = data['value']/data['value'].sum() * 2*pi
data['color'] = Category20c[len(x)]
p = figure(plot_height=350, title="Pie Chart", toolbar_location=None,
tools="hover", tooltips="@country: @value", x_range=(-0.5, 1.0))
r = p.wedge(x=0, y=1, radius=0.4,
start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),
line_color="white", fill_color='color', legend_field='country', source=data)
p.axis.axis_label = None
p.axis.visible = False
p.grid.grid_line_color = None
bokeh_pane = pn.pane.Bokeh(p, theme="dark_minimal")
########################################
np.random.seed(7)
df = pd.DataFrame({'int': [1, 2, 3],
                   'float': [8.54, 7.48, 6.42],
                    'str': ['A', 'B', 'C'],
                    'bool': [True, False, True],
                    'date': [dt.date(2022, 10, 11), dt.date(2021, 8, 21), dt.date(2020, 1, 10)],
                    'datetime': [dt.datetime(2022, 10, 11, 10), dt.datetime(2021, 8, 21, 12), dt.datetime(2020, 1,10, 13)]}, index=[1, 2, 3])
df_widget = pn.widgets.Tabulator(
df, buttons={'Print': "<i class='fa fa-print'></i>"})
# df_widget.style.table_styles = "border: 2px solid red"
##############################
bokeh_formatters = {
'float': NumberFormatter(format='0.00000'),
'bool': BooleanFormatter(),
}
tabulator_formatter = pn.widgets.Tabulator(df, formatters=bokeh_formatters, buttons={
'print': '<i class="fa fa-check-circle"></i>',
'check': '<i class="fa fa-check"></i>'
}, configuration={
'clipboard': True,
'rowHeight': 50,
'columnDefaults': {
'headerSort': False,
},
})
sel_df = pd.DataFrame(np.random.randn(3, 5), columns=list('ABCDE'))
select_table = pn.widgets.Tabulator(sel_df, selection=[0, 2])
my_tabulator = pn.Column(tabulator_formatter, select_table)
# def click(event):
# print(f'Clicked cell in {event.column!r} column, row {event.row!r} with value {event.value!r}')
# tabulator_formatter.on_click(click)
########################################
logo = 'https://panel.holoviz.org/_static/logo_horizontal.png'
# red = pn.Spacer(background='red', height=50)
# green = pn.Spacer(background='green', height=50)
# blue = pn.Spacer(background='blue', height=50)
card_1 = pn.Card(
# red, green, blue,
# header_background='white',
# header_color='white',
header=pn.panel(logo, height=40),
width=300,
collapsible=False
)
##############################
class BokehBarChart:
# showAxisLine: bool, width: int, height: int
 def getChart(self, x_axisData, y_axisData,title=None, **options):
    for key, value in options.items():
      if key == "height":
       self.height = value
      elif key == "width":
       self.width = value
      elif key == "showAxisLine":
       self.showAxisLine = value
    if len(options) == 0:
       self.height = 80
       self.width = 300
       self.showAxisLine = False
       bar_chart = figure(x_range=x_axisData, height=self.height, width=self.width,
       title=title, tools="", toolbar_location=None)
       bar_chart.vbar(x=x_axisData, top=y_axisData, width=0.9)
    if not self.showAxisLine:
       bar_chart.axis.axis_label = None
       bar_chart.axis.visible = False
       bar_chart.grid.grid_line_color = None
       return bar_chart
fruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']
# pd.DataFrame({'fruits': ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']})
counts = [5, 3, 4, 2, 4, 6]
chart_1 = BokehBarChart().getChart(fruits, counts)
chart_1_1 = BokehBarChart().getChart(fruits, counts,'Reproducibility')
chart_1_2 = BokehBarChart().getChart(fruits,counts,'Faliure')
chart_1_3 = BokehBarChart().getChart(fruits,counts,'MIN CKP')
# pd.DataFrame({"gas": ["li""me","co2", "HCL", "o2"]})
x_axisData = ["li","me","co2", "HCL", "o2"]
y_axisData = [8,6,4, 10, 7]
options = {"showAxisLine": True, "width": 300, "height": 150}
#pd.DataFrame({"date": ["DA", "DB","DC","DD","DE"]})
x_axisData1 = ["DA", "DB","DC","DD","DE"]
y_axisData1 = [3, 5, 7,5,8]
options = {"showAxisLine": True, "width": 300, "height": 150}
chart_2 = BokehBarChart().getChart(x_axisData, y_axisData, **options)
chart_3 = BokehBarChart().getChart(x_axisData1,y_axisData1, **options)
#############################
measurement_process_values = pd.DataFrame({'Component': ['Component name 1', 'Component name 2', 'Component name 3', 'Component name 4'],'Events': ['Events:5', 'Events:1', 'Events:2', 'Events:4']}) # , header=False
# measurement_stability = pn.pane.DataFrame(
# measurement_process_values, escape=False, width=800, index=False, header=False)
measurement_tabulator = pn.widgets.Tabulator(measurement_process_values, show_index=False, text_align='left',buttons={'Action': "<i class='fa fa-check-circle'></i> "})
# buttons={'Chart': bar_chart}
measurement_tabulator.patch({'Events': [(0, 'Hai'),(1, '<i class="fa fa-external-link"></i>'),(2, '<i class="fa fa-external-link"></i>'),]})
patch_table = pn.widgets.Tabulator(df[['int', 'float', 'str', 'bool']])
patch_table.patch({'bool': [(0, False),(2, False)],'int': [(slice(0, 2), [3, 2])]})

###########################
class MeasurementStabilityTemplate(ReactiveHTML):
 total_events = param.Number(default=5)
 successful_events = param.Number(default=4)
 warning_events = param.Number(default=1)
 error_events = param.Number(default=0)
 options = param.List(doc="Axis0 Breakpoints.")
 # param.String(default='')
 _template = """
 
<div style="display:inline">
  
Active Events: <b>1</b>
<span style="margin-left:15px">Total: <b>${total_events}</b></span>
<span style="margin-left:10px"><i class='fa fa-check-circle' style="color:#98CD7F;
font-size: 15px;"></i> <b>${successful_events}</b></span>
<span style="margin-left:10px"><i class='fa fa-exclamation-circle' style="color:#FFDC7F;
font-size: 15px;"></i> <b>${warning_events}</b></span>
<span style="margin-left:10px"><i class='fa fa-exclamation-triangle' style="color:#ED7F97;
font-size: 15px;"></i> <b>${error_events}</b></span>
</div>
<br/>
<br/>
<div id="myId" style="display: grid;">
{% for iteration in options %}
<div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
<i class='fa fa-check-circle fa-${iteration}' style="color:#98CD7F; font-size: 15px;"></i>
<span style="margin-left:10px">Component name ${iteration}</span>
<span style="margin-left:25px">Events: 5</span>
<img src="chart-test.png" style="width: 200px;" alt="Image Here" />
<span></span>
</div>
{% endfor %}
</div>
"""
# <input id="custom_id" onchange="${script('some_script')}"></input>
# _scripts = {
# 'some_script': 'console.log(self.state.event)'
# 'render': """
# """
# }
# _dom_events = {'text-input': ['change']}
# __javascript__ =
['https://unpkg.com/material-components-web@latest/dist/material-components-web.min.js']
# __css__ =
['https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css']
measurement_stability_contents = MeasurementStabilityTemplate(options=[1, 3, 5, 7, 9])

# pn.Row(pn.pane.HTML('<i class="fa fa-check-circle" style="color:#98CD7F; font-size:15px;"></i>'))
# measurement_stability_contents = pn.pane.HTML(
# measurement_stability_html, height=400)
"""
<!--

<div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
<i class='fa fa-check-circle' style="color:#98CD7F; font-size: 15px;"></i>
<span style="margin-left:10px">Component name</span>
<span style="margin-left:25px">Events: 5</span>
</div>
<div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
<i class='fa fa-exclamation-circle' style="color:#FFDC7F; font-size: 15px;"></i>
<span style="margin-left:10px">Component name</span>
<span style="margin-left:25px">Events: 1</span>
</div>
<div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
<i class='fa fa-exclamation-triangle' style="color:#ED7F97; font-size: 15px;"></i>
<span style="margin-left:10px">Component name</span>
<span style="margin-left:25px">Events: 2</span>
</div>
<div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
<i class='fa fa-check-circle' style="color:#98CD7F; font-size: 15px;"></i>
<span style="margin-left:10px">Component name</span>
<span style="margin-left:25px">Events: 4</span>
</div>
<div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
<i class='fa fa-exclamation-circle' style="color:#FFDC7F; font-size: 15px;"></i>
<span style="margin-left:10px">Component name</span>
<span style="margin-left:25px">Events: 2</span>
</div>
-->
"""
##########################
class DeviceHealthTemplate(ReactiveHTML):
 total_events = param.Number(default=5)
 successful_events = param.Number(default=4)
 warning_events = param.Number(default=1)
 error_events = param.Number(default=0)
 options = param.List(doc="Axis0 Breakpoints.")
# param.String(default='')
 _template = """
<div style="display:inline">
Active Events: <b>1</b>
<span style="margin-left:15px">Total: <b>${total_events}</b></span>
<span style="margin-left:10px"><i class='fa fa-check-circle' style="color:#98CD7F;
font-size: 15px;"></i> <b>${successful_events}</b></span>
<span style="margin-left:10px"><i class='fa fa-exclamation-circle' style="color:#FFDC7F;
font-size: 15px;"></i> <b>${warning_events}</b></span>
<span style="margin-left:10px"><i class='fa fa-exclamation-triangle' style="color:#ED7F97;
font-size: 15px;"></i> <b>${error_events}</b></span>
</div>
<br/>
<br/>
<br/>
<br/>
<div id="myId1" style="display: grid;">
{% for iteration in options %}
<div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
<i class='fa fa-check-circle fa-${iteration}' style="color:#98CD7F; font-size: 15px;"></i>
<span style="margin-left:10px">Component name ${iteration}</span>
<span style="margin-left:25px">Events: 5</span>
<img src="./assets/chart.png" style="width: 200px;" />
<span></span>
</div>
{% endfor %}
</div>
"""
# <input id="custom_id" onchange="${script('some_script')}"></input>
# _scripts = {
# 'some_script': 'console.log(self.state.event)'
# 'render': """
# """
# }
# _dom_events = {'text-input': ['change']}
# __javascript__ =
['https://unpkg.com/material-components-web@latest/dist/material-components-web.min.js']
# __css__ =
['https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css']
obj_device_health = DeviceHealthTemplate()
# buttons={'Chart': bar_chart}
################################
maintanace_process_values = pd.DataFrame({'value': ['Corrective', 'preventive', 'predictive', 'Alarm/Warnings']})

class MaintanaceTemplate(ReactiveHTML):
    maintanace_process_values = pd.DataFrame({
        'value': ['Corrective', 'Preventive', 'Predictive', 'Alarm/Warnings']
    })

    _template = """
            <div id="myId" style="display: grid;">
                <div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
                    Corrective
                </div>
                <div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
                    Preventive
                </div>
                <div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
                    Predictive
                </div>
                <div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
                    Alarm/Warnings
                </div>
            </div>
        """


measurement_stability_contents = MeasurementStabilityTemplate(options=[
    1, 3, 5, 7])

# pn.Row(pn.pane.HTML('<i class="fa fa-check-circle" style="color:#98CD7F; font-size: 15px;"></i>'))
# measurement_stability_contents = pn.pane.HTML(
#     measurement_stability_html, height=400)
obj_maintanace = MaintanaceTemplate()

"""
<!--
<div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
    <i class='fa fa-check-circle' style="color:#98CD7F; font-size: 15px;"></i>
    <span style="margin-left:10px">Component name</span>
    <span style="margin-left:25px">Events: 5</span>
</div>

<div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
    <i class='fa fa-exclamation-circle' style="color:#FFDC7F; font-size: 15px;"></i>
    <span style="margin-left:10px">Component name</span>
    <span style="margin-left:25px">Events: 1</span>
</div>

<div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
    <i class='fa fa-exclamation-triangle' style="color:#ED7F97; font-size: 15px;"></i>
    <span style="margin-left:10px">Component name</span>
    <span style="margin-left:25px">Events: 2</span>
</div>

<div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
    <i class='fa fa-check-circle' style="color:#98CD7F; font-size: 15px;"></i>
    <span style="margin-left:10px">Component name</span>
    <span style="margin-left:25px">Events: 4</span>
</div>

<div style="display: inline; border-bottom: 2px solid lightgrey; padding: 10px">
    <i class='fa fa-exclamation-circle' style="color:#FFDC7F; font-size: 15px;"></i>
    <span style="margin-left:10px">Component name</span>
    <span style="margin-left:25px">Events: 2</span>
</div>
-->
"""


# buttons={'Chart': bar_chart}

class CardUI:
 def getCardUI(self, cardContents, cardTitle):
   logo = './assets/external-link-icon.png'
   cardElement = pn.Card(cardContents,title=cardTitle,width=600, collapsible=False,)
# header=pn.Row(cardTitle, pn.panel(logo, height=20)),,
# header=pn.panel(logo, height=20),

   return cardElement

cardTitle = 'Measurement Stability (Process Value)'
myContenets = pn.Column(measurement_stability_contents,chart_1 ,measurement_tabulator, patch_table,button)
measurement_stability_cardUI = CardUI().getCardUI(myContenets, cardTitle)


cart_2_title = "Measurement Accuracy (Validation)"
myContents_1 = pn.Column(chart_1_1,chart_1_2,chart_1_3)
cardUI_2 = CardUI().getCardUI(myContents_1, cart_2_title)

cart_3_title = "DeviceHealth"
mycontenets = pn.Column(obj_device_health,chart_3)
cardUI_3 = CardUI().getCardUI(mycontenets,cart_3_title)

cart_4_title = "Maintanace"
mycontents = pn.Column(obj_maintanace, chart_1)
cardUI_4 = CardUI().getCardUI(mycontents,cart_4_title)


# header_css_classes=['text_left'])
#########################
class console:
 @staticmethod
 def log(*args, **kwargs):
  print(*args, **kwargs)
# console.log('hello world', end='\n\n')
logging.debug("########################")
# logging.debug(test_card)
###############################
class Select(ReactiveHTML):
 options = param.List(doc="Options to choose from.")
 value = param.String(doc="Current selected option")
 _template = """
<select id="select" value="${value}" style="width: ${model.width}px">
{% for option in options %}
<option id="option">${option}</option>
{% endfor %}
</select>
"""
_dom_events = {'select': ['change']}
select = Select(options=['A', 'B', 'C'])
###############################
taptool = p.select(type=TapTool)
tabs.extend([('Google Map', pn.Row(viewer.param)), #, viewer.view
             ('Calc', pn.Row(value1, operator, value2, button, result)),
             ('HTML', pn.Row(html_pane)),('Color', pn.widgets.ColorPicker()),
             ('Pie-Chart', bokeh_pane),
             ('Tabulator Card', pn.Row(measurement_stability_cardUI, cardUI_2,cardUI_3,cardUI_4)),
             ('Tabulator Formatter', my_tabulator),
             ('Reactive HTML', select)])



tabs.active = 6
material.main.append(tabs)
material.servable()
server = material.show(threaded=False)
# server.port(5000)
# pn.serve(server, port=5000)
# pn.serve(server, static_dirs={'assets': './assets'})